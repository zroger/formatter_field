<?php
/**
 * @file
 */

/**
 * Implements hook_field_info().
 */
function formatter_field_field_info() {
  return array(
    'formatter' => array(
      'label' => t('Formatter'), 
      'description' => t('This field stores formatter information for another field.'), 
      'settings' => array(), 
      'instance_settings' => array('field_name' => ''), 
      'default_widget' => 'formatter_select', 
      'default_formatter' => 'hidden',
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function formatter_field_field_is_empty($item, $field) {
  if (empty($item['type'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_instance_settings_form().
 */
function formatter_field_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];

  $instances = field_read_instances(array(
    'entity_type' => $instance['entity_type'],
    'bundle' => $instance['bundle'],
  ));
  foreach ($instances as $other_instance) {
    if ($other_instance['field_name'] != $instance['field_name']) {
      $options[$other_instance['field_name']] = $other_instance['label'];
    }
  }

  $form['field_name'] = array(
    '#type' => 'select', 
    '#title' => t('Field to be formatted'), 
    '#default_value' => $settings['field_name'], 
    '#required' => TRUE, 
    '#options' => $options,
    '#description' => t('The field to be formatted using the settings in this field.'),
  );
  return $form;
}

/**
 * Implements hook_field_widget_info().
 */
function formatter_field_field_widget_info() {
  return array(
    'formatter_select' => array(
      'label' => t('Formatter select'), 
      'field types' => array('formatter'), 
      'settings' => array(), 
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT, 
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ), 
  );
}

/**
 * Implements hook_field_widget_form().
 */
function formatter_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $formatted_field = field_read_field($instance['settings']['field_name']);
  $formatted_instance = field_read_instance($instance['entity_type'], $instance['settings']['field_name'], $instance['bundle']);

  module_load_include('inc', 'field_ui', 'field_ui.admin');
  $formatter_options = field_ui_formatter_options($formatted_field['type']);
  unset($formatter_options['from_field']);
  $formatter_options['hidden'] = t('<Hidden>');

  $element['type'] = array(
    '#type' => 'select',
    '#title' => t('Formatter for @title', array('@title' => $formatted_instance['label'])), 
    '#options' => $formatter_options,
    '#default_value' => isset($items[$delta]['type']) ? $items[$delta]['type'] : '',
  );

  $element['settings'] = array(
    '#tree' => 1,
  );

  // TODO: implement ajax settings form.

  return $element;
}

/**
 * Implements hook_field_formatter_info().
 */
function formatter_field_field_formatter_info() {
  $fields = field_info_field_types();
  unset($fields['formatter']);

  return array(
    'from_field' => array(
      'label' => t('Formatter from field'), 
      'field types' => array_keys($fields),
      'settings' => array(
        'formatter_field' => '',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function formatter_field_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();
  if ($display['type'] == 'from_field') {
    $instances = field_read_instances(array(
      'entity_type' => $instance['entity_type'],
      'bundle' => $instance['bundle'],
    ));
    foreach ($instances as $other_instance) {
      if ($other_instance['field_name'] != $instance['field_name']) {
        $options[$other_instance['field_name']] = $other_instance['label'];
      }
    }

    $element['formatter_field'] = array(
      '#title' => t('Formatter field'), 
      '#type' => 'select', 
      '#default_value' => $settings['formatter_field'], 
      '#options' => $options,
      '#required' => TRUE,
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function formatter_field_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $formatter_field = field_read_instance($instance['entity_type'], $settings['formatter_field'], $instance['bundle']);
  $summary = t('Formatted by @field field.', array('@field' => $formatter_field['label']));

  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function formatter_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  if ($display['type'] == 'from_field') {
    $formatter_instance = field_read_instance($instance['entity_type'], $display['settings']['formatter_field'], $instance['bundle']);
    $formatter_items = field_get_items($entity_type, $entity, $display['settings']['formatter_field']);
    $display = $formatter_items[0] + $display;

    $formatter_type = field_info_formatter_types($display['type']);
    $display['module'] = $formatter_type['module'];

    $element = module_invoke($display['module'], 'field_formatter_view', $entity_type, $entity, $field, $instance, $langcode, $items, $display);
  }
  return $element;
}

